/** Author: Alexander Bech* Leetcode Problem Solution* Leetcode ID: 70
*/#include <iostream>#include <unordered_map>class Solution {public:	std::unordered_map<int,int> feb;	Solution(){	feb[0] = 1;	feb[1] = 1;	};    int climbStairs(int n) {		std::unordered_map<int,int>::iterator it = feb.find(n);		if (it != feb.end())			return it->second;		feb[n] = climbStairs(n-1) + climbStairs(n-2);		return feb[n];    }};/*	*	Imagine that there are 10 stairs to the top. Then when taking the last step,*	there are either 1 or 2 stairs remaining.*******//* Testing */int main(){	Solution sltn;	int result;	int stair_steps = 1000;		result = sltn.climbStairs(stair_steps);	std::cout << result << std::endl;	}