/** Author: Alexander Bech* Leetcode Problem Solution* Leetcode ID: 88
*/#include <iostream>#include <vector>class Solution {public:	Solution(){};	void merge(std::vector<int>& nums1, int m, std::vector<int>& nums2, int n)	{		if (n == 0)			return;		if (m == 0)		{			nums1 = nums2;			return;		}		int num2Counter = 0;		int num2temp = nums2[num2Counter];				for (int i = 0; i < m+n; i++)		{			if (num2temp <= nums1[i])			{					for (int j = nums1.size()-1; j > i; j--)				{					nums1[j] = nums1[j-1];				}				nums1[i] = num2temp;															num2Counter++;				if (num2Counter == n)					break;				num2temp = nums2[num2Counter];			}		}			if (num2Counter < n)		{			for (int i = m+num2Counter; num2Counter < n; i++)			{				nums1[i] = nums2[num2Counter];				num2Counter++;			}		}	}};/* * 1 2 3 * 2 5 6* -->* 1 2 2 3 5 6*//* Testing */int main(){	Solution sltn;	std::vector<int> nums1 = {2,0};	std::vector<int> nums2 = {1};	sltn.merge(nums1,1,nums2,1);	std::cout << "results" << std::endl;	for (auto i : nums1)		std::cout << i << std::endl;	}