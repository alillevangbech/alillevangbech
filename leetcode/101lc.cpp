/** Author: Alexander Bech* Leetcode Problem Solution* Leetcode ID: 101
*/#include <iostream>#include "Solutions/lc.h"#include <vector>class Solution {public:	Solution(){};    bool isSymmetric(TreeNode* root) {	// How to do this	// I could compare trees before	std::vector<TreeNode*> right;	std::vector<TreeNode*> left;	std::vector<TreeNode*> prev = {root};			bool allNULL = false;	while (true)	{		allNull = true;		for (auto p : prev)		{			if (p != NULL)				allNull = false;		}		if (allNULL)			return true;						for (auto p : prev)		{			if (p->right == NULL)				right.push_back(NULL);			else				right.push_back(p->right);						if (p->left == NULL)				left.push_back(NULL);			else				left.push_back(p->left);		}						for (int i = 0; right.size(); i++)		{			if (right[i] != NULL && left[i] != NULL)			{				if (right[i]->val != left[i]->val)					return false;			}			else if (right[i] == NULL && left[i] == NULL)				continue;			else				return false;		}				prev.clear();		for (auto p : right)			prev.push_back(p);		for (auto p : left)			prev.push_back(p);	}	}    }};/* Testing */int main(){	Solution sltn;		TreeNode a(1);	TreeNode b(2);	TreeNode c(3);		TreeNode* p_a = &a;	p_a->right = &b;	p_a->left = &c;		TreeNode a1(1);	TreeNode b1(2);	TreeNode c1(3);		TreeNode* p_a1 = &a1;	p_a1->right = &b1;	p_a1->left = &c1;		std::cout << sltn.isSymmetric(p_a) << std::endl;			}